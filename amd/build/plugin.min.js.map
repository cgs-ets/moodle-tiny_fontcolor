{"version":3,"file":"plugin.min.js","sources":["../src/plugin.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny tiny_fontcolor for Moodle.\r\n *\r\n * @module      tiny_fontcolor/plugin\r\n * @copyright   2025 Veronica Bermegui\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {getTinyMCE} from 'editor_tiny/loader';\r\nimport {getPluginMetadata} from 'editor_tiny/utils';\r\n\r\nimport {component, pluginName} from './common';\r\nimport {register as registerOptions} from './options';\r\nimport {getSetup as getCommandSetup} from './commands';\r\nimport * as Configuration from './configuration';\r\n\r\n// Setup the tiny_fontcolor Plugin.\r\n// eslint-disable-next-line no-async-promise-executor\r\nexport default new Promise(async(resolve) => {\r\n    // Note: The PluginManager.add function does not support asynchronous configuration.\r\n    // Perform any asynchronous configuration here, and then call the PluginManager.add function.\r\n    const [\r\n        tinyMCE,\r\n        pluginMetadata,\r\n        setupCommands,\r\n    ] = await Promise.all([\r\n        getTinyMCE(),\r\n        getPluginMetadata(component, pluginName),\r\n        getCommandSetup(),\r\n    ]);\r\n\r\n    // Reminder: Any asynchronous code must be run before this point.\r\n    tinyMCE.PluginManager.add(pluginName, (editor) => {\r\n        // Register any options that your plugin has\r\n        registerOptions(editor);\r\n\r\n        // Setup any commands such as buttons, menu items, and so on.\r\n        setupCommands(editor);\r\n\r\n        // Return the pluginMetadata object. This is used by TinyMCE to display a help link for your plugin.\r\n        return pluginMetadata;\r\n    });\r\n\r\n    resolve([pluginName, Configuration]);\r\n});\r\n"],"names":["Promise","async","tinyMCE","pluginMetadata","setupCommands","all","component","pluginName","PluginManager","add","editor","resolve","Configuration"],"mappings":";;;;;;;kCAiCe,IAAIA,SAAQC,MAAAA,gBAInBC,QACAC,eACAC,qBACMJ,QAAQK,IAAI,EAClB,yBACA,4BAAkBC,kBAAWC,qBAC7B,0BAIJL,QAAQM,cAAcC,IAAIF,oBAAaG,+BAEnBA,QAGhBN,cAAcM,QAGPP,kBAGXQ,QAAQ,CAACJ,mBAAYK"}