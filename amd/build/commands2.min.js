define("tiny_fontcolor/commands2",["exports","editor_tiny/utils","core/str","./common"],(function(_exports,_utils,_str,_common){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getSetup=void 0;
/**
   * Commands helper for the Moodle tiny_fontcolor plugin.
   *
   * @module      tiny_fontcolor/commands
   * @copyright   2025 Veronica Bermegui
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   *
   */
let colorPickerContainer=null,isPickerVisible=!1,clickHandler=null;const showColorPicker=(editor,buttonTitle)=>{var _editor$editorContain;hideColorPicker();const hasSelection=editor.selection.getContent({format:"text"}).length>0;let currentColor="#000000";colorPickerContainer=document.createElement("div"),colorPickerContainer.className="tiny-fontcolor-picker",Object.assign(colorPickerContainer.style,{position:"fixed",zIndex:"999999",backgroundColor:"white",padding:"15px",borderRadius:"5px",boxShadow:"0 2px 10px rgba(0,0,0,0.2)",border:"1px solid #ddd",display:"flex",flexDirection:"column",gap:"10px"});const colorInput=document.createElement("input");colorInput.type="color",colorInput.style.width="100%",colorInput.style.height="40px",colorInput.style.cursor="pointer",colorInput.style.opacity="1";const colorPreview=document.createElement("div");if(colorPreview.style.width="100%",colorPreview.style.minWidth="50px",colorPreview.style.height="50px",colorPreview.style.borderRadius="4px",colorPreview.style.border="1px solid #ccc",colorPreview.style.marginTop="10px",hasSelection){const selectedColor=function(editor){if(!editor||!editor.dom||!editor.selection)return null;const dom=editor.dom,selection=editor.selection,nodes=selection.getSelectedBlocks()||[selection.getNode()];for(const node of nodes){if(!node)continue;const color=dom.getStyle(node,"color")||node.getAttribute("color");if(color)return color;const coloredChildren=dom.select('*[style*="color"], *[color]',node);if(coloredChildren&&coloredChildren.length>0){var _coloredChildren$;const childColor=dom.getStyle(coloredChildren[0],"color")||(null===(_coloredChildren$=coloredChildren[0])||void 0===_coloredChildren$?void 0:_coloredChildren$.getAttribute("color"));if(childColor)return childColor}}return null}(editor);selectedColor&&(currentColor=function(rgb){if(!rgb)return"#000000";const rgbValues=rgb.match(/\d+/g);if(!rgbValues||rgbValues.length<3)return"#000000";const r=parseInt(rgbValues[0]),g=parseInt(rgbValues[1]),b=parseInt(rgbValues[2]);return"#"+[r,g,b].map((x=>{const hex=x.toString(16).padStart(2,"0");return 1===hex.length?"0"+hex:hex})).join("")}(selectedColor),colorInput.value=currentColor)}colorPreview.style.backgroundColor=currentColor,colorInput.addEventListener("change",(e=>{currentColor=e.target.value,colorPreview.style.backgroundColor=currentColor,editor.execCommand("ForeColor",!1,currentColor),hideColorPicker()})),colorInput.addEventListener("input",(e=>{colorPreview.style.backgroundColor=e.target.value})),colorPickerContainer.appendChild(colorInput),colorPickerContainer.appendChild(colorPreview);const button=null===(_editor$editorContain=editor.editorContainer)||void 0===_editor$editorContain?void 0:_editor$editorContain.querySelector(`.tox-tbtn[aria-label="${buttonTitle}"]`);if(button){const rect=button.getBoundingClientRect();Object.assign(colorPickerContainer.style,{top:`${rect.bottom}px`,left:`${rect.left}px`})}document.body.appendChild(colorPickerContainer),isPickerVisible=!0,colorInput.focus(),clickHandler=e=>{var _colorPickerContainer;null!==(_colorPickerContainer=colorPickerContainer)&&void 0!==_colorPickerContainer&&_colorPickerContainer.contains(e.target)||null!=button&&button.contains(e.target)||hideColorPicker()},document.addEventListener("mousedown",clickHandler)};const hideColorPicker=()=>{colorPickerContainer&&isPickerVisible&&(colorPickerContainer.parentNode&&colorPickerContainer.parentNode.removeChild(colorPickerContainer),colorPickerContainer=null,isPickerVisible=!1,clickHandler&&(document.removeEventListener("mousedown",clickHandler),clickHandler=null))};_exports.getSetup=async()=>{const[buttonTitle,menuTitle,btnImage]=await Promise.all([(0,_str.get_string)("button_fontcolor",_common.component),(0,_str.get_string)("menuitem_fontcolor",_common.component),(0,_utils.getButtonImage)("icon",_common.component)]);return editor=>{editor.ui.registry.addIcon(_common.icon,btnImage.html),editor.ui.registry.addButton(_common.fontColorButtonName,{icon:_common.icon,tooltip:buttonTitle,onAction:()=>{isPickerVisible?hideColorPicker():showColorPicker(editor,buttonTitle)}}),editor.ui.registry.addMenuItem(_common.fontColorMenuItemName,{icon:_common.icon,text:menuTitle,onAction:()=>{editor.execCommand("ForeColor",!1,"#000000")}}),editor.on("blur",hideColorPicker)}}}));

//# sourceMappingURL=commands2.min.js.map